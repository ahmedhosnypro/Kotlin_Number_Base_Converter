type: edu
files:
- name: src/converter/Main.kt
  visible: true
  text: |-
    package converter

    fun main() {
        println("Hello, world!")
    }
  learner_created: false
- name: test/NumeralSystemConverterTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;

    public class NumeralSystemConverterTest extends StageTest<String> {

      @Override
      public List<TestCase<String>> generate() {

        return Arrays.asList(
                new TestCase<String>().setDynamicTesting(this::test1),
                new TestCase<String>().setDynamicTesting(this::test2),
                new TestCase<String>().setDynamicTesting(this::test3),
                new TestCase<String>().setDynamicTesting(this::test4),
                new TestCase<String>().setDynamicTesting(this::test5),
                new TestCase<String>().setDynamicTesting(this::test6),
                new TestCase<String>().setDynamicTesting(this::test7)
        );
      }

      //Check the exit command
      CheckResult test1() {
          TestedProgram main = new TestedProgram();
          String output = main.start().toLowerCase();

          if (!output.contains("/from decimal") || !output.contains("/to decimal") || !output.contains(
                  "/exit")) {
              return CheckResult.wrong("Your program should prompt the user with the message \"Do you " +
                                             "want to convert /from decimal of /to decimal? (To quit " +
                                             "type /exit)\"");
          }

          main.execute("/exit");
          if (!main.isFinished()) {
              return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
          }

          return CheckResult.correct();
      }

      //Check conversion from decimal
      //to base 2
      CheckResult test2() {

        TestedProgram main = new TestedProgram();
        String output;
        String lastLine;
        String userResult;
        String actualResult;
        String[] lines;
        int randomNumber;

        main.start();

        output = main.execute("/from").toLowerCase();
        if (!output.contains("decimal")) {
            return CheckResult.wrong("Your program should ask the user for the decimal number to be " +
                                             "converted if they enter the command \"/from\"");
        }

        randomNumber = Integer.parseInt(getRandomSource(10));
        actualResult = convertDecimalToBaseX(randomNumber, 2);

        output = main.execute(String.valueOf(randomNumber)).toLowerCase();
        if (!output.contains("target base")) {
          return CheckResult
                  .wrong("Your program should ask the user for the target base " +
                                 "after they enter the decimal number .");
        }

        output = main.execute("2").toLowerCase();
        if (!output.contains("result:")) {
          return CheckResult
                  .wrong("Your program should print the result in the format " +
                                 "\"Conversion result: CONVERTED_NUMBER\", where CONVERTED_NUMBER is " +
                                 "the result of the conversion.");
        }

        lines = output.split("\n");
        lastLine = lines[lines.length -1];

        if (!lines[0].contains(":")) {
          return CheckResult.wrong("After entering the target base the next line doesn't contain a conversion result!\n" +
              "It should contain ':' symbol!\n" +
              "Your line\n:" + lines[0]);
        }

        userResult = lines[0].substring(output.indexOf(":") + 1).trim();
        if (!userResult.equalsIgnoreCase(actualResult)) {
          return CheckResult.wrong("The conversion result of your program is wrong");
        }

        if (main.isFinished()) {
          return CheckResult.wrong("Your program should not terminate until the user enters \"/exit\"");
        }

        if (!lastLine.contains("/from") || !lastLine.contains("/to decimal") || !lastLine.contains(
                "/exit")) {
          return CheckResult.wrong("Your program should show the command prompt after each conversion" +
                                           " until the user enters \"/exit\"");
        }

        main.execute("/exit");
        if (!main.isFinished()) {
          return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
        }

        return CheckResult.correct();
      }

      //to base 16
      CheckResult test3() {
        TestedProgram main = new TestedProgram();
        String output;
        String lastLine;
        String userResult;
        String actualResult;
        String[] lines;
        int randomNumber;

        main.start();

        for (int i = 0; i < 5; i++) {
          randomNumber = Integer.parseInt(getRandomSource(10));
          actualResult = convertDecimalToBaseX(randomNumber, 16);
          main.execute("/from");
          main.execute(String.valueOf(randomNumber));

          output = main.execute("16").toLowerCase();
          lines = output.split("\n");

          if (!lines[0].contains(":")) {
            return CheckResult.wrong("After entering the target base the next line doesn't contain a conversion result!\n" +
                "It should contain ':' symbol!\n" +
                "Your line\n:" + lines[0]);
          }

          userResult = lines[0].substring(output.indexOf(":") + 1).trim();
          if (!userResult.equalsIgnoreCase(actualResult)) {
            return CheckResult.wrong("The conversion result of your program is wrong");
          }

          if (main.isFinished()) {
            return CheckResult.wrong("Your program should not terminate until the user enters \"/exit\"");
          }

          lastLine = lines[lines.length -1];
          if (!lastLine.contains("/from") || !lastLine.contains("/to decimal") || !lastLine.contains(
                  "/exit")) {
            return CheckResult.wrong("Your program should show the command prompt after each conversion" +
                                             " until the user enters \"/exit\"");
          }

        }

        main.execute("/exit");
        if (!main.isFinished()) {
          return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
        }

        return CheckResult.correct();
      }

      //to base 8
      CheckResult test4() {
        TestedProgram main = new TestedProgram();
        String output;
        String lastLine;
        String userResult;
        String actualResult;
        String[] lines;
        int randomNumber;

        main.start();

        for (int i = 0; i < 5; i++) {
          randomNumber = Integer.parseInt(getRandomSource(10));
          actualResult = convertDecimalToBaseX(randomNumber, 8);
          main.execute("/from");
          main.execute(String.valueOf(randomNumber));

          output = main.execute("8").toLowerCase();
          lines = output.split("\n");

          if (!lines[0].contains(":")) {
            return CheckResult.wrong("After entering the target base the next line doesn't contain a conversion result!\n" +
                "It should contain ':' symbol!\n" +
                "Your line\n:" + lines[0]);
          }

          userResult = lines[0].substring(output.indexOf(":") + 1).trim();
          if (!userResult.equalsIgnoreCase(actualResult)) {
            return CheckResult.wrong("The conversion result of your program is wrong");
          }

          if (main.isFinished()) {
            return CheckResult.wrong("Your program should not terminate until the user enters \"/exit\"");
          }

          lastLine = lines[lines.length -1];
          if (!lastLine.contains("/from") || !lastLine.contains("/to decimal") || !lastLine.contains(
                  "/exit")) {
            return CheckResult.wrong("Your program should show the command prompt after each conversion" +
                                             " until the user enters \"/exit\"");
          }

        }

        main.execute("/exit");
        if (!main.isFinished()) {
          return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
        }

        return CheckResult.correct();
      }

      //Check conversion to decimal
      //from base 2
      CheckResult test5() {
        TestedProgram main = new TestedProgram();
        String output;
        String lastLine;
        String userResult;
        String actualResult;
        String randomSourceNumber;
        String[] lines;

        main.start();

        output = main.execute("/to").toLowerCase();
        if (!output.contains("source number")) {
          return CheckResult.wrong("Your program should ask the user for the source number to be " +
                                           "converted if they enter the command \"/to\", with the " +
                                           "message \"Enter source number:\"");
        }

        randomSourceNumber = getRandomSource(2).toLowerCase();
        actualResult = convertBaseXToDecimal(randomSourceNumber, 2);

        output = main.execute(randomSourceNumber).toLowerCase();
        if (!output.contains("source base")) {
          return CheckResult.wrong("Your program should request for the source base after getting the" +
                                           " source number from the user with the message \"Enter " +
                                           "source base:\"");
        }

        output = main.execute("2").toLowerCase();
        if (!output.contains("decimal result:")) {
          return CheckResult.wrong("Your program should print the conversion result in the format " +
                                           "\"Conversion to decimal result: CONVERTED_NUMBER\", where" +
                                           " CONVERTED_NUMBER is the result of the conversion");
        }

        lines = output.split("\n");
        lastLine = lines[lines.length -1];

        if (!lines[0].contains(":")) {
          return CheckResult.wrong("After entering the target base the next line doesn't contain a conversion result!\n" +
              "It should contain ':' symbol!\n" +
              "Your line\n:" + lines[0]);
        }

        userResult = lines[0].substring(output.indexOf(":") + 1).trim();
        if (!userResult.equalsIgnoreCase(actualResult)) {
          return CheckResult.wrong("The conversion result of your program is wrong");
        }

        if (main.isFinished()) {
          return CheckResult.wrong("Your program should not terminate until the user enters \"/exit\"");
        }

        if (!lastLine.contains("/from") || !lastLine.contains("/to decimal") || !lastLine.contains(
                "/exit")) {
          return CheckResult.wrong("Your program should show the command prompt after each conversion" +
                                           " until the user enters \"/exit\"");
        }

        main.execute("/exit");
        if (!main.isFinished()) {
          return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
        }

        return CheckResult.correct();
      }

      //from base 8
      CheckResult test6() {
        TestedProgram main = new TestedProgram();
        String output;
        String lastLine;
        String userResult;
        String actualResult;
        String randomSourceNumber;
        String[] lines;

        main.start();

        for (int i = 0; i < 5; i++) {
          main.execute("/to");

          randomSourceNumber = getRandomSource(8);
          actualResult = convertBaseXToDecimal(randomSourceNumber, 8);

          main.execute(randomSourceNumber);
          output = main.execute("8").toLowerCase();

          lines = output.split("\n");
          lastLine = lines[lines.length -1];

          if (!lines[0].contains(":")) {
            return CheckResult.wrong("After entering the target base the next line doesn't contain a conversion result!\n" +
                "It should contain ':' symbol!\n" +
                "Your line\n:" + lines[0]);
          }

          userResult = lines[0].substring(output.indexOf(":") + 1).trim();
          if (!userResult.equalsIgnoreCase(actualResult)) {
            return CheckResult.wrong("The conversion result of your program is wrong");
          }

          if (main.isFinished()) {
            return CheckResult.wrong("Your program should not terminate until the user enters \"/exit\"");
          }

          if (!lastLine.contains("/from") || !lastLine.contains("/to decimal") || !lastLine.contains(
                  "/exit")) {
            return CheckResult.wrong("Your program should show the command prompt after each conversion" +
                                             " until the user enters \"/exit\"");
          }

        }

        main.execute("/exit");
        if (!main.isFinished()) {
          return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
        }

        return CheckResult.correct();
      }

      //from base 16
      CheckResult test7() {
        TestedProgram main = new TestedProgram();
        String output;
        String lastLine;
        String userResult;
        String actualResult;
        String randomSourceNumber;
        String[] lines;

        main.start();

        for (int i = 0; i < 5; i++) {
          main.execute("/to");

          randomSourceNumber = getRandomSource(16);
          actualResult = convertBaseXToDecimal(randomSourceNumber, 16);

          main.execute(randomSourceNumber);
          output = main.execute("16").toLowerCase();

          lines = output.split("\n");
          lastLine = lines[lines.length -1];

          if (!lines[0].contains(":")) {
            return CheckResult.wrong("After entering the target base the next line doesn't contain a conversion result!\n" +
                "It should contain ':' symbol!\n" +
                "Your line\n:" + lines[0]);
          }

          userResult = lines[0].substring(output.indexOf(":") + 1).trim();
          if (!userResult.equalsIgnoreCase(actualResult)) {
            return CheckResult.wrong("The conversion result of your program is wrong");
          }

          if (main.isFinished()) {
            return CheckResult.wrong("Your program should not terminate until the user enters \"/exit\"");
          }

          if (!lastLine.contains("/from") || !lastLine.contains("/to decimal") || !lastLine.contains(
                  "/exit")) {
            return CheckResult.wrong("Your program should show the command prompt after each conversion" +
                                             " until the user enters \"/exit\"");
          }

        }

        main.execute("/exit");
        if (!main.isFinished()) {
          return CheckResult.wrong("Your program should terminate when the user enters \"/exit\"");
        }

        return CheckResult.correct();
      }




      //Helper methods
      String convertDecimalToBaseX(int num, int targetBase) {
        return Integer.toString(num, targetBase);
      }

      String convertBaseXToDecimal(String number, int sourceBase) {
        return String.valueOf(Integer.parseInt(number, sourceBase));
      }

      String getRandomSource(int sourceBase) {

        int n = new Random().nextInt(1000);

        return Integer.toString(n, sourceBase);

      }
    }
  learner_created: false
- name: src/converter/BaseConverter.kt
  visible: true
  text: |-
    package converter

    import java.util.*

    abstract class BaseConverter {
        abstract fun convert(input: Int, targetBase: Int): String?
        abstract fun toBinary(input: Int): String?
        abstract fun toOctal(input: Int): String?
        abstract fun toDecimal(input: Int): String?
        abstract fun toHex(input: Int): String?
    }

    internal class ConvertFactory {

        fun createConverter(inputBase: Int): BaseConverter? {
            return when (inputBase) {
                10 -> DecimalConverter()
                else -> null
            }
        }
    }

    internal class DecimalConverter : BaseConverter() {
        override fun convert(input: Int, targetBase: Int): String {
            return when (targetBase) {
                2 -> toBinary(input)
                8 -> toOctal(input)
                16 -> toHex(input)
                else -> input.toString()
            }
        }

        private fun normalConvert(input: Int, targetBase: Int): String {
            val out = StringBuilder()
            val list = LinkedList<Int>()
            var quotient = input
            var remainder: Int
            while (quotient > 0) {
                remainder = quotient % targetBase
                quotient /= targetBase
                list.addFirst(remainder)
            }
            for (N in list) {
                out.append(N)
            }
            return out.toString()
        }

        override fun toBinary(input: Int): String {
            return normalConvert(input, 2)
        }

        override fun toOctal(input: Int): String {
            return normalConvert(input, 8)
        }

        override fun toDecimal(input: Int): String {
            return input.toString()
        }

        override fun toHex(input: Int): String {
            val out = StringBuilder()
            val list = LinkedList<String>()
            var quotient = input
            var remainder: Int
            val map = mapOf(
                10 to "A", 11 to "B", 12 to "C", 13 to "D", 14 to "E", 15 to "F"
            )
            while (quotient > 0) {
                remainder = quotient % 16
                quotient /= 16
                val v = map.getOrDefault(remainder, remainder.toString())
                list.addFirst(v)
            }
            for (N in list) {
                out.append(N)
            }
            return out.toString()
        }
    }
  learner_created: true
- name: src/converter/DecimalConverter.kt
  visible: true
  text: |-
    package converter

    import java.util.*

    internal class DecimalConverter : BaseConverter() {
        override fun convert(input: Int, targetBase: Int): String {
            return when (targetBase) {
                2 -> toBinary(input)
                8 -> toOctal(input)
                16 -> toHex(input)
                else -> input.toString()
            }
        }

        private fun normalConvert(input: Int, targetBase: Int): String {
            val out = StringBuilder()
            val list = LinkedList<Int>()
            var quotient = input
            var remainder: Int
            while (quotient > 0) {
                remainder = quotient % targetBase
                quotient /= targetBase
                list.addFirst(remainder)
            }
            for (N in list) {
                out.append(N)
            }
            return out.toString()
        }

        override fun toBinary(input: Int): String {
            return normalConvert(input, 2)
        }

        override fun toOctal(input: Int): String {
            return normalConvert(input, 8)
        }

        override fun toDecimal(input: Int): String {
            return input.toString()
        }

        override fun toHex(input: Int): String {
            val out = StringBuilder()
            val list = LinkedList<String>()
            var quotient = input
            var remainder: Int
            val map = mapOf(
                10 to "A", 11 to "B", 12 to "C",
                13 to "D", 14 to "E", 15 to "F"
            )
            while (quotient > 0) {
                remainder = quotient % 16
                quotient /= 16
                val v = map.getOrDefault(remainder, remainder.toString())
                list.addFirst(v)
            }
            for (N in list) {
                out.append(N)
            }
            return out.toString()
        }
    }
  learner_created: true
- name: src/converter/InputReader.kt
  visible: true
  text: |-
    package converter

    object InputReader {
        fun getDecimalNum(): Int {
            print("Enter number in decimal system: ")
            while (true) {
                try {
                    return readln().toInt()
                } catch (ignored: NumberFormatException) {
                    // ignored
                }
            }
        }

        fun baseAsNum(): Int {

            print("Enter target base: ")
            while (true) {
                try {
                    return readln().toInt()
                } catch (ignored: NumberFormatException) {
                    // ignored
                }
            }
        }
    }
  learner_created: true
- name: src/converter/CLI.kt
  visible: true
  text: |-
    package converter

    object CLI {
        fun start() {
            val converter: BaseConverter? = ConverterFactory.createConverter(10)
            val out = converter!!.convert(InputReader.getDecimalNum(), InputReader.baseAsNum())
            println("Conversion result: $out")
        }
    }
  learner_created: true
- name: src/converter/ConverterFactory.kt
  visible: true
  text: |-
    package converter

    import java.util.*

    object ConverterFactory {
        fun createConverter(baseAsString: String): BaseConverter? {
            return when (baseAsString.lowercase(Locale.getDefault())) {
                "decimal" -> converter.DecimalConverter()
                else -> null
            }
        }

        fun createConverter(baseAsInt: Int): BaseConverter? {
            return when (baseAsInt) {
                10 -> converter.DecimalConverter()
                else -> null
            }
        }
    }
  learner_created: true
- name: src/converter/Command.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12346#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 08 Jun 2022 05:02:09 UTC
record: 2
